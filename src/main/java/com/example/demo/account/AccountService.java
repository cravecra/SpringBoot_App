package com.example.demo.account;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.exception.ApiRequestException;

// AccountService Class for communication between user input and outputs

// Control of possible user errors for a better understand
// via JSON so User can see what are the errors
// due logic has been done focused on URL input fields and autogenerated values


@Service
public class AccountService {
	private String handledException = "Handled Exception Occurred: ";

	@Autowired
	private AccountRepository accountRepository;

	public List<Account> getAllAccounts(String userid) {
		Optional<List<Account>> accounts = accountRepository.findByUserid(userid);
		return accounts.map(accs -> {
			return accs;
		}).orElseThrow(() -> new ApiRequestException(
				handledException + "User ID: " + userid + " NOT FOUNDED or User has NO ACCOUNTS"));
	}

	public Account getAccount(String userid, String id) {
		Optional<List<Account>> accounts = accountRepository.findByUserid(userid);
		return accounts.map(accs -> {
			for (Account acc : accs) {
				if (acc.getId().equals(id)) {
					return acc;
				}
			}
			throw new ApiRequestException("User ID: " + userid + " not has Account ID: " + id);
		}).orElseThrow(() -> new ApiRequestException(handledException + "User or Account NOT FOUNDED"));
	}

	public List<AccountState> addAccounts(List<Account> accounts, String userid) {
		List<AccountState> accountsAdded = new ArrayList<AccountState>();
		accounts.forEach(account -> {
			if (account.getUserid() != null) {
				throw new ApiRequestException(handledException + "Please remove userId property from account id:"
						+ account.getId() + " name:" + account.getName() + " currency:" + account.getCurrency()
						+ ", userID will be taken from URL ./users/{userid}/account or do a PUT request to update account in ./users/{userid}/account/{id}");
			}
			if (account.getId() != null) {
				throw new ApiRequestException(handledException + "Please remove ID property from account id:"
						+ account.getId() + " name:" + account.getName() + " currency:" + account.getCurrency()
						+ ", ID will be autogenerated or do a PUT request to update user in ./users/{userid}/account/{id}");
			}
		});
		accounts.forEach(account -> {
			account.setUserid(userid	);
			Account acc = accountRepository.save(account);
			accountsAdded
					.add(new AccountState(acc.getId(), acc.getUserid(), acc.getName(), acc.getCurrency(), "ADDED"));
		});

		return accountsAdded;
	}

	public List<AccountState> updateAccount(Account account, String userid, String id) {
		List<AccountState> iterations = new ArrayList<AccountState>();

		if (account.getUserid() != null) {
			throw new ApiRequestException(handledException
					+ "Remove userid property, account can not be transfered to another user, userid will be taken from URL ./users/{userid}/accounts/{id}");
		}
		if (account.getId() != null) {
			throw new ApiRequestException(
					handledException + "Remove id property, it will be taken from URL ./users/{userid}/accounts/{id}");
		}

		account.setId(id);
		account.setUserid(userid);

		return accountRepository.findByUserid(userid).map(accounts -> {
			for (Account acc : accounts) {
				if (acc.getId().equals(id)) {
					if (acc.getName().equals(account.getName()) && acc.getCurrency().equals(account.getCurrency())) {
						throw new ApiRequestException(
								handledException + "New Values are the same in Database, UPDATE NOT DONE");
					} else {
						iterations.add(new AccountState(acc.getId(), acc.getUserid(), acc.getName(), acc.getCurrency(),
								"Previous"));
						acc.setName(account.getName());
						acc.setCurrency(account.getCurrency());
						iterations.add(new AccountState(acc.getId(), acc.getUserid(), acc.getName(), acc.getCurrency(),
								"New"));
						accountRepository.save(acc);
						return iterations;
					}
				}
			}
			throw new ApiRequestException(handledException + "Account ID: " + account.getId() + " NOT FOUNDED");
		}).orElseThrow(
				() -> new ApiRequestException(handledException + "User ID: " + account.getUserid() + " NOT FOUNDED"));

	}

	public AccountState deleteAccount(String userid, String id) {
		return accountRepository.findByUserid(userid).map(accs -> {
			for (Account acc : accs) {
				if (acc.getId().equals(id)) {
					accountRepository.deleteById(id);
					return new AccountState(acc.getId(), acc.getUserid(), acc.getName(), acc.getCurrency(), "DELETED");
				}
			}
			throw new ApiRequestException(handledException + "Account ID: " + id + " NOT FOUNDED");
		}).orElseThrow(() -> new ApiRequestException(handledException + "Users ID: " + userid + " NOT FOUNDED"));
	}

}
